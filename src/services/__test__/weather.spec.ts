import {afterEach, describe, expect, it, vi} from "vitest";
import {fetchWeatherData} from "../weather.ts";
import axios from "axios";

// Successful payload in the format matching Open-Meteo documentation after transformation
const mockSuccessfulWeatherPayload = {
    data: {
        "latitude": 43.4254,
        "longitude": -80.5112,
        "generationtime_ms": 0.16951560974121094,
        "utc_offset_seconds": 0,
        "timezone": "GMT",
        "timezone_abbreviation": "GMT",
        "elevation": 38,
        "current_units": {
            "time": "iso8601",
            "interval": "seconds",
            "temperature_2m": "°C",
            "relative_humidity_2m": "%",
            "wind_speed_10m": "km/h",
            "precipitation": "mm",
            "apparent_temperature": "°C",
            "is_day": ""
        },
        "current": {
            "time": "2025-09-15T17:15",
            "interval": 900,
            "temperature_2m": 20.2,
            "relative_humidity_2m": 70,
            "wind_speed_10m": 9.2,
            "precipitation": 0,
            "apparent_temperature": 20.4,
            "is_day": 1
        },
        "hourly_units": {
            "time": "iso8601",
            "temperature_2m": "°C",
            "weather_code": "wmo code"
        },
        "hourly": {
            "time": [
                "2025-09-15T00:00",
                "2025-09-15T01:00",
                "2025-09-15T02:00",
                "2025-09-15T03:00",
                "2025-09-15T04:00",
                "2025-09-15T05:00",
                "2025-09-15T06:00",
                "2025-09-15T07:00",
                "2025-09-15T08:00",
                "2025-09-15T09:00",
                "2025-09-15T10:00",
                "2025-09-15T11:00",
                "2025-09-15T12:00",
                "2025-09-15T13:00",
                "2025-09-15T14:00",
                "2025-09-15T15:00",
                "2025-09-15T16:00",
                "2025-09-15T17:00",
                "2025-09-15T18:00",
                "2025-09-15T19:00",
                "2025-09-15T20:00",
                "2025-09-15T21:00",
                "2025-09-15T22:00",
                "2025-09-15T23:00",
                "2025-09-16T00:00",
                "2025-09-16T01:00",
                "2025-09-16T02:00",
                "2025-09-16T03:00",
                "2025-09-16T04:00",
                "2025-09-16T05:00",
                "2025-09-16T06:00",
                "2025-09-16T07:00",
                "2025-09-16T08:00",
                "2025-09-16T09:00",
                "2025-09-16T10:00",
                "2025-09-16T11:00",
                "2025-09-16T12:00",
                "2025-09-16T13:00",
                "2025-09-16T14:00",
                "2025-09-16T15:00",
                "2025-09-16T16:00",
                "2025-09-16T17:00",
                "2025-09-16T18:00",
                "2025-09-16T19:00",
                "2025-09-16T20:00",
                "2025-09-16T21:00",
                "2025-09-16T22:00",
                "2025-09-16T23:00",
                "2025-09-17T00:00",
                "2025-09-17T01:00",
                "2025-09-17T02:00",
                "2025-09-17T03:00",
                "2025-09-17T04:00",
                "2025-09-17T05:00",
                "2025-09-17T06:00",
                "2025-09-17T07:00",
                "2025-09-17T08:00",
                "2025-09-17T09:00",
                "2025-09-17T10:00",
                "2025-09-17T11:00",
                "2025-09-17T12:00",
                "2025-09-17T13:00",
                "2025-09-17T14:00",
                "2025-09-17T15:00",
                "2025-09-17T16:00",
                "2025-09-17T17:00",
                "2025-09-17T18:00",
                "2025-09-17T19:00",
                "2025-09-17T20:00",
                "2025-09-17T21:00",
                "2025-09-17T22:00",
                "2025-09-17T23:00",
                "2025-09-18T00:00",
                "2025-09-18T01:00",
                "2025-09-18T02:00",
                "2025-09-18T03:00",
                "2025-09-18T04:00",
                "2025-09-18T05:00",
                "2025-09-18T06:00",
                "2025-09-18T07:00",
                "2025-09-18T08:00",
                "2025-09-18T09:00",
                "2025-09-18T10:00",
                "2025-09-18T11:00",
                "2025-09-18T12:00",
                "2025-09-18T13:00",
                "2025-09-18T14:00",
                "2025-09-18T15:00",
                "2025-09-18T16:00",
                "2025-09-18T17:00",
                "2025-09-18T18:00",
                "2025-09-18T19:00",
                "2025-09-18T20:00",
                "2025-09-18T21:00",
                "2025-09-18T22:00",
                "2025-09-18T23:00",
                "2025-09-19T00:00",
                "2025-09-19T01:00",
                "2025-09-19T02:00",
                "2025-09-19T03:00",
                "2025-09-19T04:00",
                "2025-09-19T05:00",
                "2025-09-19T06:00",
                "2025-09-19T07:00",
                "2025-09-19T08:00",
                "2025-09-19T09:00",
                "2025-09-19T10:00",
                "2025-09-19T11:00",
                "2025-09-19T12:00",
                "2025-09-19T13:00",
                "2025-09-19T14:00",
                "2025-09-19T15:00",
                "2025-09-19T16:00",
                "2025-09-19T17:00",
                "2025-09-19T18:00",
                "2025-09-19T19:00",
                "2025-09-19T20:00",
                "2025-09-19T21:00",
                "2025-09-19T22:00",
                "2025-09-19T23:00",
                "2025-09-20T00:00",
                "2025-09-20T01:00",
                "2025-09-20T02:00",
                "2025-09-20T03:00",
                "2025-09-20T04:00",
                "2025-09-20T05:00",
                "2025-09-20T06:00",
                "2025-09-20T07:00",
                "2025-09-20T08:00",
                "2025-09-20T09:00",
                "2025-09-20T10:00",
                "2025-09-20T11:00",
                "2025-09-20T12:00",
                "2025-09-20T13:00",
                "2025-09-20T14:00",
                "2025-09-20T15:00",
                "2025-09-20T16:00",
                "2025-09-20T17:00",
                "2025-09-20T18:00",
                "2025-09-20T19:00",
                "2025-09-20T20:00",
                "2025-09-20T21:00",
                "2025-09-20T22:00",
                "2025-09-20T23:00",
                "2025-09-21T00:00",
                "2025-09-21T01:00",
                "2025-09-21T02:00",
                "2025-09-21T03:00",
                "2025-09-21T04:00",
                "2025-09-21T05:00",
                "2025-09-21T06:00",
                "2025-09-21T07:00",
                "2025-09-21T08:00",
                "2025-09-21T09:00",
                "2025-09-21T10:00",
                "2025-09-21T11:00",
                "2025-09-21T12:00",
                "2025-09-21T13:00",
                "2025-09-21T14:00",
                "2025-09-21T15:00",
                "2025-09-21T16:00",
                "2025-09-21T17:00",
                "2025-09-21T18:00",
                "2025-09-21T19:00",
                "2025-09-21T20:00",
                "2025-09-21T21:00",
                "2025-09-21T22:00",
                "2025-09-21T23:00"
            ],
            "temperature_2m": [
                12.2,
                12.1,
                12,
                12.4,
                12.6,
                13.1,
                13.2,
                13.9,
                15,
                17.6,
                19.5,
                19.2,
                18.9,
                20.4,
                21.1,
                21.6,
                21.4,
                20.5,
                19.5,
                18.7,
                18.3,
                17.5,
                16.7,
                17.1,
                16.8,
                15.9,
                15.6,
                15.1,
                14.7,
                14.5,
                14.5,
                15.1,
                16.3,
                16.7,
                17,
                17.3,
                17.2,
                18,
                18.4,
                19,
                18.6,
                17.5,
                16.1,
                15.2,
                14.6,
                14,
                13.9,
                13.5,
                13.2,
                13,
                12.8,
                12.9,
                12.8,
                12.4,
                12.4,
                13.1,
                14.4,
                15.5,
                16,
                17.4,
                18.2,
                18.1,
                17.5,
                17.2,
                16,
                15.6,
                15,
                14.8,
                14.7,
                14.8,
                14.4,
                14.4,
                14.6,
                14.7,
                15.1,
                15.1,
                15.2,
                15.3,
                15.8,
                17.1,
                17.8,
                18.9,
                19.5,
                19.9,
                20.2,
                20.1,
                20,
                19.6,
                19,
                18,
                17,
                16.2,
                15.5,
                15,
                14.8,
                14.7,
                14.7,
                14.7,
                14.8,
                14.9,
                15,
                15.1,
                15.7,
                17.2,
                19.1,
                20.8,
                22.1,
                23.2,
                24,
                24.4,
                24.6,
                24.2,
                23.2,
                21.6,
                20.3,
                19.4,
                18.7,
                18.1,
                17.6,
                17.3,
                16.9,
                16.6,
                16.2,
                16,
                15.7,
                15.6,
                16.1,
                17.9,
                20.3,
                22.5,
                24.2,
                25.7,
                26.8,
                27.2,
                27.2,
                26.7,
                25.4,
                23.4,
                21.8,
                20.7,
                19.8,
                19.1,
                18.6,
                18.2,
                17.8,
                17.4,
                17,
                16.8,
                16.4,
                16.1,
                16.4,
                17.8,
                19.7,
                21.5,
                22.9,
                24.2,
                25.1,
                25.6,
                25.7,
                25.4,
                24.3,
                22.8,
                21.5,
                21,
                20.8,
                20.6,
                20.1,
                19.5
            ],
            "weather_code": [
                2,
                2,
                3,
                3,
                61,
                61,
                61,
                80,
                3,
                3,
                3,
                80,
                81,
                3,
                3,
                1,
                2,
                2,
                2,
                1,
                80,
                80,
                3,
                3,
                2,
                3,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                61,
                61,
                80,
                3,
                3,
                2,
                2,
                2,
                3,
                61,
                61,
                80,
                3,
                2,
                2,
                3,
                61,
                80,
                3,
                3,
                3,
                3,
                3,
                3,
                2,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                61,
                3,
                3,
                3,
                3,
                2,
                2,
                1,
                2,
                2,
                3,
                3,
                2,
                3,
                3,
                3,
                2,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                1,
                1,
                1,
                3,
                3,
                3,
                3,
                3,
                3,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                2,
                2,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                3,
                3,
                3,
                3,
                3,
                3,
                1,
                1,
                1,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                0,
                0,
                0,
                2,
                2,
                2,
                3,
                3
            ]
        },
        "daily_units": {
            "time": "iso8601",
            "temperature_2m_max": "°C",
            "temperature_2m_min": "°C",
            "weather_code": "wmo code"
        },
        "daily": {
            "time": [
                "2025-09-15",
                "2025-09-16",
                "2025-09-17",
                "2025-09-18",
                "2025-09-19",
                "2025-09-20",
                "2025-09-21"
            ],
            "temperature_2m_max": [
                21.6,
                19,
                18.2,
                20.2,
                24.6,
                27.2,
                25.7
            ],
            "temperature_2m_min": [
                12,
                13.5,
                12.4,
                14.6,
                14.7,
                15.6,
                16.1
            ],
            "weather_code": [
                81,
                80,
                80,
                3,
                3,
                3,
                3
            ]
        }
    },
    status: 200,
}

vi.mock('axios', () => ({
    default: {
        get: vi.fn(),
    }
}));

const mockedAxios = vi.mocked(axios, {
    deep: true
});

describe('fetchWeatherData', () => {
    afterEach(() => {
        vi.clearAllMocks()
    })

    it('should fetch weather successfully', async () => {
        // Arrange
        const coordinates = {
            "latitude": 43.4254,
            "longitude": -80.5112,
        };

        const url = 'https://api.open-meteo.com/v1/forecast'
        const params = {
            ...coordinates,
            "daily": ["temperature_2m_max", "temperature_2m_min", "weather_code"],
            "hourly": ["temperature_2m", "weather_code"],
            "current": ["temperature_2m", "relative_humidity_2m", "wind_speed_10m", "precipitation", "apparent_temperature", "is_day"],
        };

        mockedAxios.get.mockResolvedValueOnce(mockSuccessfulWeatherPayload);

        // Act
        const expected = await fetchWeatherData(coordinates);

        // Assert
        expect(axios.get).toHaveBeenCalledWith(url, {
            params
        })
        expect(expected).toEqual(mockSuccessfulWeatherPayload.data);
    });
})